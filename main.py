import logging
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_PMR_RATE = 16.10  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å —Ä—É–±–ª—è –ü–ú–†
CRYPTO_RATE_DEFAULT = 18.100  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
current_pmr_rate = DEFAULT_PMR_RATE
user_crypto_rates = {}  # user_id: rate


def get_pmr_exchange_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –ü–ú–† —Å —Å–∞–π—Ç–∞ bankipmr.ru"""
    global current_pmr_rate
    try:
        url = "https://bankipmr.ru/konverter-valjut/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ —Å –∫—É—Ä—Å–æ–º USD/RUB –ü–ú–†
        rate_block = soup.find('div', class_='currency-rate')
        if rate_block:
            rate_text = rate_block.find('span', class_='rate').text.strip()
            current_pmr_rate = float(rate_text)
            return current_pmr_rate

        return current_pmr_rate
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return current_pmr_rate


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º API-–∫–ª—é—á–æ–º
bot = Bot(token="7564150169:AAFcXszV_SsrCZkLilfFEicVSa3Pvh1tCCk")
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ProfitStates(StatesGroup):
    earned = State()
    spent = State()
    currency = State()
    crypto_rate = State()


class ConvertStates(StatesGroup):
    amount = State()
    direction = State()


class CryptoRateState(StatesGroup):
    set_crypto_rate = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="exchange_rate"),
        InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", callback_data="calculate_profit"),
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="convert_currency"),
        InlineKeyboardButton(text="‚öôÔ∏è –ó–∞–¥–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã", callback_data="set_crypto_rate"),
    )
    return builder.as_markup()


# –ú–µ–Ω—é –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
def exchange_rate_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–†—É–±–ª—å –ü–ú–†", callback_data="rate_pmr"),
        InlineKeyboardButton(text="–î–æ–ª–ª–∞—Ä", callback_data="rate_usd"),
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()


# –ú–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
def convert_currency_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üíµ –í —Ä—É–±–ª–∏ –ü–ú–†", callback_data="convert_to_pmr"),
        InlineKeyboardButton(text="üí≤ –í –¥–æ–ª–ª–∞—Ä—ã", callback_data="convert_to_usd"),
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
def currency_select_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–æ–ª–ª–∞—Ä—ã ($)", callback_data="currency_usd"),
        InlineKeyboardButton(text="–†—É–±–ª–∏ –ü–ú–†", callback_data="currency_pmr"),
    )
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üè¶ –ë–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè¶ –ë–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )
    await callback.answer()


# –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
@dp.callback_query(F.data == "exchange_rate")
async def exchange_rate_menu(callback: CallbackQuery):
    pmr_rate = get_pmr_exchange_rate()
    await callback.message.edit_text(
        f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n"
        f"‚Ä¢ 1$ = {pmr_rate} —Ä—É–±. –ü–ú–†\n"
        "‚Ä¢ 1 USDT = 1.00$ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞)\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=exchange_rate_kb()
    )
    await callback.answer()


# –ü–æ–∫–∞–∑ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data.startswith("rate_"))
async def show_rate(callback: CallbackQuery):
    currency = callback.data.split("_")[1]
    pmr_rate = get_pmr_exchange_rate()

    if currency == "pmr":
        text = f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –ü–ú–†:\n1$ = {pmr_rate} —Ä—É–±. –ü–ú–†"
    else:
        text = "üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞:\n1 USDT = 1.00$ (Tether –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–ª–ª–∞—Ä—É)"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="exchange_rate")]
        ]
    )

    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
@dp.callback_query(F.data == "calculate_profit")
async def start_profit_calculation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞:")
    await state.set_state(ProfitStates.earned)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞
@dp.message(ProfitStates.earned)
async def received_earned(message: Message, state: FSMContext):
    try:
        earned = float(message.text)
        await state.update_data(earned=earned)
        await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç:")
        await state.set_state(ProfitStates.spent)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞—Ç—Ä–∞—Ç
@dp.message(ProfitStates.spent)
async def received_spent(message: Message, state: FSMContext):
    try:
        spent = float(message.text)
        await state.update_data(spent=spent)
        await message.answer(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤–≤–æ–¥–∞:",
            reply_markup=currency_select_kb()
        )
        await state.set_state(ProfitStates.currency)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
@dp.callback_query(ProfitStates.currency, F.data.startswith("currency_"))
async def received_currency(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.split("_")[1]
    await state.update_data(currency=currency)

    user_id = callback.from_user.id
    crypto_rate = user_crypto_rates.get(user_id, CRYPTO_RATE_DEFAULT)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π",
                callback_data="use_current_crypto_rate"
            )]
        ]
    )

    await callback.message.edit_text(
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã: {crypto_rate} —Ä—É–±. –ü–ú–† –∑–∞ 1$\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π':",
        reply_markup=keyboard
    )
    await state.set_state(ProfitStates.crypto_rate)
    await callback.answer()


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç—ã
@dp.callback_query(ProfitStates.crypto_rate, F.data == "use_current_crypto_rate")
async def use_current_crypto_rate(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    crypto_rate = user_crypto_rates.get(user_id, CRYPTO_RATE_DEFAULT)
    await calculate_and_show_profit(callback, state, crypto_rate)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.message(ProfitStates.crypto_rate)
async def received_crypto_rate(message: Message, state: FSMContext):
    try:
        crypto_rate = float(message.text)
        await calculate_and_show_profit(message, state, crypto_rate)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –†–∞—Å—á–µ—Ç –∏ –ø–æ–∫–∞–∑ –ø—Ä–∏–±—ã–ª–∏
async def calculate_and_show_profit(source, state: FSMContext, crypto_rate: float):
    user_data = await state.get_data()
    user_id = source.from_user.id

    user_crypto_rates[user_id] = crypto_rate

    pmr_rate = get_pmr_exchange_rate()
    earned = user_data['earned']
    spent = user_data['spent']
    currency = user_data['currency']

    profit = earned - spent

    if currency == 'usd':
        profit_pmr = profit * pmr_rate
    else:
        profit_pmr = profit

    profit_crypto = profit_pmr / crypto_rate

    result = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earned} {'$' if currency == 'usd' else '—Ä—É–±. –ü–ú–†'}\n"
        f"‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã: {spent} {'$' if currency == 'usd' else '—Ä—É–±. –ü–ú–†'}\n"
        f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit:.2f} {'$' if currency == 'usd' else '—Ä—É–±. –ü–ú–†'}\n"
        f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –≤ —Ä—É–±. –ü–ú–†: {profit_pmr:.2f}\n"
        f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ: {profit_crypto:.2f}$ (–ø–æ –∫—É—Ä—Å—É {crypto_rate} —Ä—É–±./$)"
    )

    if isinstance(source, Message):
        await source.answer(result)
        await source.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=main_menu_kb()
        )
    elif isinstance(source, CallbackQuery):
        await source.message.answer(result)
        await source.message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=main_menu_kb()
        )

    await state.clear()


# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
@dp.callback_query(F.data == "convert_currency")
async def start_convert_currency(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=convert_currency_kb()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("convert_to_"))
async def convert_direction_selected(callback: CallbackQuery, state: FSMContext):
    direction = callback.data.split("_")[2]  # convert_to_pmr ‚Üí pmr

    await state.update_data(direction=direction)

    if direction == "pmr":
        await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:")
    else:
        await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –ü–ú–†:")

    await state.set_state(ConvertStates.amount)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(ConvertStates.amount)
async def convert_amount_received(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_data = await state.get_data()
        direction = user_data['direction']
        pmr_rate = get_pmr_exchange_rate()

        if direction == "pmr":
            result = amount * pmr_rate
            text = f"üí± {amount}$ = {result:.2f} —Ä—É–±. –ü–ú–† (–∫—É—Ä—Å: 1$ = {pmr_rate})"
        else:
            result = amount / pmr_rate
            text = f"üí± {amount} —Ä—É–±. –ü–ú–† = {result:.2f}$ (–∫—É—Ä—Å: 1$ = {pmr_rate})"

        await message.answer(text)
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=main_menu_kb()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.callback_query(F.data == "set_crypto_rate")
async def set_crypto_rate(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    crypto_rate = user_crypto_rates.get(user_id, CRYPTO_RATE_DEFAULT)

    await callback.message.edit_text(
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {crypto_rate} —Ä—É–±. –ü–ú–† –∑–∞ 1$\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:"
    )
    await state.set_state(CryptoRateState.set_crypto_rate)
    await callback.answer()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.message(CryptoRateState.set_crypto_rate)
async def save_crypto_rate(message: Message, state: FSMContext):
    try:
        new_rate = float(message.text)
        user_id = message.from_user.id
        user_crypto_rates[user_id] = new_rate
        await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_rate} —Ä—É–±. –ü–ú–† –∑–∞ 1$")
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=main_menu_kb()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())